// 673. 最长递增子序列的个数
// Time complexity: O(n ^ 2), Space complexity: O(n)
class Solution {
    public int findNumberOfLIS(int[] nums) {
        int len = nums.length;

        int[] dp = new int[len];
        int[] counter = new int[len];
        Arrays.fill(dp, 1);
        Arrays.fill(counter, 1);

        for(int i = 1; i < len; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[j] < nums[i]) {
                    if(dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        counter[i] = counter[j];
                    } else if(dp[j] + 1 == dp[i]) {
                        counter[i] += counter[j];
                    }
                }
            }
        }

        int max = dp[0];
        for(int i = 1; i < len; i++) {
            max = Math.max(max, dp[i]);
        }

        int ans = 0;
        for(int i = 0; i < len; i++) {
            if(dp[i] == max) {
                ans += counter[i];
            }
        }

        return ans;
    }
}

// 70
// Time Complexity: O(n)
// Space Complexity: O(n)
class Solution {
    public int climbStairs(int n) {
        if(n == 1) return 1;
        
        int[] dp = new int[n + 1];
        
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
}

// 120
// space complexity: O(n ^ 2)
// time complexity: O(n ^ 2)
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int len = triangle.size();

        int[]dp = new int[len + 1];

        for(int i = len - 1; i >= 0; i--) {
            for(int j = 0; j <= i; j++) {
                dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);
            }
        }

        return dp[0];
    }
}
